<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Weaver Reference Guide</title>
    <link rel="stylesheet" href="weaver.css">
  </head>
  <body>
    <header>
      <h1><a href="index.htm">Weaver: A Game Engine for GNU/Linux</a></h1>
      <span class="menu">
        <a href="documentation.htm">Documentation</a>
        <a href="tutorial.htm">Tutorial</a>
        <a href="examples.htm">Examples</a>
        <a href="download.htm">Download</a>
      </span>
    </header>
    <div class="docs">
      <h2>Weaver Reference Guide</h2>
      <p>
        This page lists all functions and data structures defined in
        Weaver API. We use the following icons to help you check some
        properties of the variables in Weaver API:
      </p>
      <ul>
        <li><img class="icon" src="images/read_only.png" width="25px"
                 height="25px" title="Read-only">: This variable is
          read-only. Never try to change it's value.</li>
        <li>
          <img class="icon" src="images/loop.png" width="25px"
               height="25px" title="Main loop only">: This variable or
               function should be run or read only inside a main
               loop.
        </li>
        <li>
          <img class="icon" src="images/not_thread.png" width="25px"
               height="25px" title="Not thread-safe">: This function
               is not thread-safe.
        </li>
      </ul>
      <h3>Index</h3>
      <ol>
        <li><a href="#basic">Basic Functions and Variables</a></li>
        <ol>
          <li><a href="#basic_variable">Variables</a></li>
          <ol>
            <li><a href="#W">W</a></li>
            <li><a href="#game">W.game</a></li>
            <li><a href="#t">W.t</a></li>
            <li><a href="#dt">W.dt</a></li>
          </ol>
          <li><a href="#basic_functions">Functions</a></li>
          <ol>
            <li><a href="#Walloc">Walloc</a></li>
            <li><a href="#Wexit">Wexit</a></li>
            <li><a href="#Wexit_loop">Wexit_loop</a></li>
            <li><a href="#Wfree">Wfree</a></li>
            <li><a href="#Winit">Winit</a></li>
            <li><a href="#Wloop">Wloop</a></li>
            <li><a href="#Wsubloop">Wsubloop</a></li>
          </ol>
        </ol>
        <li><a href="#numeric">Numeric Functions and
            Variables</a></li>
        <ol>
          <li><a href="#numeric_functions">Functions</a>
            <ol>
              <li><a href="#random">W.random</a>
            </ol>
        </ol>
      </ol>
      <h3 id="#basic">Basic Functions and Variables</h3>
      <h4 id="basic_variable">Variables</h4>
      <h5 id="W">struct W <img class="icon" src="images/read_only.png"
             width="25px" height="25px" title="Read-only"></h5>
      <p>
        The <tt>W</tt> struct is a struct where you can find almost
        all the variables and functions defined by Weaver API. It's
        main function is act as a namespace, avoiding conflicts
        between user variable names and the API names. Almost all
        variables and functions listed in this page is
        inside <tt>W</tt>.
      </p>
      <p>
        Another advantage of defining almost all variables and
        functions inside this struct it's that we can pass the struct
        to plugins and then they can have access to all Weaver
        functions and variables.
      </p>
      <p>
        Usually you shouldn't worry about the <tt>W</tt> struct and
        never should need to pass it directly to some function. You
        just invoke it's functions and access it's variables.
      </p>
      <h5 id="game">struct _game_struct *W.game</h5>
      <p>
        This is just a pointer to the struct defined
        at <tt>src/game.h</tt> in your project. You decide which
        variables you create and define in this struct. This
        user-defined struct is a way to store your game's global
        variables and also where you put data that should be
        accessible for plugins.
      </p>
      <h5 id="t">unsigned long long W.t <img class="icon"
             src="images/read_only.png" width="25px" height="25px"
             title="Read-only"><img class="icon" src="images/loop.png"
             width="25px" height="25px" title="Main loop only"></h5>
      <p>
        This variable hold the times in microseconds since the
        program's initialization. A microsecond is 0.000001 second. So
        if you wish to know the value in seconds, you should divide it
        by 1,000,000.
      </p>
      <p>
        As this value is at least 64-bits long, this would overflow
        only after more than 500,000 years.
      </p>
      <h5 id="dt">unsigned long long W.dt <img class="icon"
             src="images/read_only.png" width="25px" height="25px"
             title="Read-only"><img class="icon" src="images/loop.png"
             width="25px" height="25px" title="Main loop only"></h5>
      <p>
        This variable holds the time in microseconds between the
        current main loop iteration and the previous loop
        iteration. As Weaver uses a fixed time step to run C code in
        the game loop, it's value should always be about 40,000, wich
        means that your C-code is running at 25 frames per second (but
        the game probably is rendering at a higher rate).
      </p>
      <p>
        If you check this value and it has a value much higher than
        40,000, it means that your game is running slowly. You should
        then do something like render less things, lower the
        resolution or the ammount of calculations in each frame.
      </p>
      <h4 id="basic_functions">Functions</h4>
      <h5 id="Walloc">void *Walloc(size_t size)</h5>
      <p>
        This function is like <tt>malloc</tt>, but the memory
        allocated is handled by Weaver's memory manager and usually
        don't need to be manually freed. The gargage collector
        will take away the memory allocated when you exit the current
        main loop.
      </p>
      <p>
        You should free the memory only if you use this function
        outside a main loop. Or if you just allocated the memory but
        won't need it anymore. In this case, use
        the <a href="#Wfree">Wfree</a> function.
      </p>
      <p>
        Weaver garbage collector runs when you call the functions
        <a href="#Wloop">Wloop</a> (except in the first invocation)
        and <a href="#Wexit_loop">Wexit_loop</a>.
      </p>
      <p>
        <b>Tip:</b> Avoid calling <tt>Walloc</tt> in a main loop
        body. This leads to memory leaks. It's better to allocate a
        pool of objects in the loop initialization and then in the
        loop body you check which objects in the pool are initialized
        and should be handled.
      </p>
      <h5 id="Wexit">void Wexit(void)<img class="icon"
               src="images/not_thread.png" width="25px" height="25px"
               title="Not thread-safe"></h5>
      <p>
        This function exits the game immediately. The game window is
        closed and the program exits if applicable. You can't access
        any variable or function listed here after
        calling <tt>Wexit</tt>.
      </p>
      <h5 id="Wexit_loop">void Wexit_loop(void)<img class="icon"
               src="images/not_thread.png" width="25px" height="25px"
                                               title="Not
                                                      thread-safe">
      <img class="icon" src="images/loop.png" width="25px"
             height="25px" title="Main loop only"></h5>
      <p>
        This function exits the current main loop, remove it from the
        stack and resume the execution of the next main loop in the
        stack. If there's just one main loop in the stack when this
        function is called, then it just exits the game.
      </p>
      <p>
        The garbage collector frees all the memory allocated in a loop
        when you call this function. To know more about main loops,
        please check <a href="loop.htm">Weaver Main Loops</a>.
      </p>
      <h5 id="Wfree">void Wfree(void *memory)</h5>
      <p>
        This function frees the memory allocated
        with <a href="#Walloc">Walloc</a>. Call this only if the
        memory was allocated outside a main loop or it was allocated
        in the same main loop where we currently are. Otherwise, you
        risk calling the function in a memory already freed by the
        garbage collector.
      </p>
      <p>
        When in doubt, don't use <tt>Wfree</tt>. Just let the garbage
        collector do the work. If your
        macro <a href="configuration.htm#W_DEBUG_LEVEL">W_DEBUG_LEVEL</a>
        is greater than 0, then Weaver will print a warning in the
        screen if it detects a memory leak while exiting the game.
      </p>
      <p>
        To check how the garbage collector and the memory in Weaver
        works, check <a href="loop.htm">Weaver Main Loops</a>.
      </p>
      <h5 id="Winit">void Winit(void)<img class="icon"
               src="images/not_thread.png" width="25px" height="25px"
                                          title="Not thread-safe"></h5>
      <p>
        This is the first function you should call in a Weaver
        program. Only after calling this function you can call any
        other function listed here or read any Weaver variable.
      </p>
      <p>
        This is the function who creates a new window according with
        the configurations in <tt>conf/conf.h</tt>.
      </p>
      <h5 id="Wloop">void Wloop(MAIN_LOOP (*loop)(void))<img class="icon"
               src="images/not_thread.png" width="25px" height="25px"
                                          title="Not
                                                 thread-safe"></h5>
      <p>
        If this function is called outside a main loop, it puts the
        loop received as argument in the loop stack and executes it.
        If this function is called inside a main loop, it stops the
        execution of the current loop, removes it from the stack, put
        the received loop in the stack and executes it. In other
        words, it substitute the current loop by the loop passed as
        argument.
      </p>
      <p>
        A main loop is where a game spends almost all the time, where
        we can get player's input and update the screen showing the
        objects created.
      </p>
      <p>
        To know more how main loops work in Weaver,
        check <a href="loop.htm">Weaver Main Loops</a>.
      </p>
      <h5 id="Wsubloop">void Wsubloop(MAIN_LOOP
               (*loop)(void))<img class="icon"
               src="images/not_thread.png" width="25px" height="25px"
               title="Not thread-safe"><img class="icon"
               src="images/loop.png" width="25px" height="25px"
                                            title="Main loop only"></h5>
      <p>
        This function pauses the execution of the current main loop,
        put the loop received as argument in the loop stack and
        executes it.
      </p>
      <p>
        It doesn't destroy the previous loop. So the garbage collector
        won't free the memory allocated in that loop.
      </p>
      <p>
        To know more how main loops work in Weaver,
        check <a href="loop.htm">Weaver Main Loops</a>.
      </p>
      <h3 id="numeric">Numeric Variables and Functions</h3>
      <h4 id="numeric_functions">Numeric Functions</h4>
      <h5 id="random">unsigned long W.random(void)</h5>
      <p>
        This function uses a variation of the Meersenne Twister
        algorithm to generate a 32-bits pseudo-random number. If you
        want your game to always use the same seed, set the
        macro <a href="configuration.htm#W_SEED">W_SEED</a>
        at <tt>conf/conf.h</tt>, otherwise Weaver tries to use an
        unpredictable seed, as a value read from <tt>/dev/urandom</tt>
        or the current time in milisseconds.
      </p>
    </div>
  </body>
</html>

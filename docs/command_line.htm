<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Installing and Using Weaver</title>
    <link rel="stylesheet" href="weaver.css">
  </head>
  <body>
    <header>
      <h1><a href="index.htm">Weaver: A Game Engine for GNU/Linux</a></h1>
      <span class="menu">
        <a href="documentation.htm">Documentation</a>
        <a href="tutorial.htm">Tutorial</a>
        <a href="examples.htm">Examples</a>
        <a href="download.htm">Download</a>
      </span>
    </header>
    <div class="docs">
      <h2>Installing and Using Weaver</h2>
      <h3>Index</h3>
      <ol>
        <li><a href="#installing">Installing Weaver</a></li>
        <ol>
          <li><a href="#unstable">Compiling Unstable Version from
              Repository</a></li>
        </ol>
        <li>
          <a href="#creating">Creating a New Game</a>
        </li>
        <li>
          <a href="#compiling">Compiling a Weaver Project</a>
        </li>
        <ol>
            <li><a href="#linux">Compiling as a Linux Game</a></li>
            <li><a href="#web">Compiling to Play in a Web Browser</a></li>
          </ol>
        <li><a href="#source">Adding Source Code Files to Weaver
            Projects</a></li>
        <li><a href="#updating">Updating Weaver Projects</a></li>
        <li><a href="#plugin">Creating a New Plugin</a></li>
        <li><a href="#shader">Creating a New Shader</a></li>
      </ol>
      <h3 id="installing">Installing Weaver</h3>
      <p>Currently there is only one way to install Weaver.</p>
      <h4 id="unstable">Compiling Unstable Version from Repository</h4>
      <p>
        Check Weaver repository
        at <a href="https://github.com/thiagoharry/weaver">
        https://github.com/thiagoharry/weaver</a>. Click in "Clone or
        Download". Or just use
        <a href="https://github.com/thiagoharry/weaver/archive/master.zip">
          this link</a>.</p>
      <p>
        Weaver was developed using literary programming technics. So
        before compiling the program, check if you have installed in
        your computer the following programs:
      </p>
      <ul>
        <li>
          CTANGLE (Classic program to write C literary programs
          created by Donald Knuth) or NOTANGLE (a more modern and
          robust program to write literary programs in any
          language). The first program can be found in
          the <a href="http://www-cs-faculty.stanford.edu/~uno/cweb.html">
          CWEB</a> package and the later is part of
          <a href="http://www.cs.tufts.edu/~nr/noweb/">NOWEB</a>
          package.
        </li>
        <li>
          A C compiler. Currently we
          support <a href="https://gcc.gnu.org/">GCC</a>
          and <a href="https://clang.llvm.org/">Clang</a>.
        </li>
      </ul>
      <p>
        In Ubuntu, Linux Mint and distros like these, you can
        install all the dependencies using the command:
      </p>
      <pre class="terminal">
sudo apt-get install noweb build-essential</pre>
      <p>
        If you have all the dependencies, you can compile Weaver with
        the command:
      </p>
      <pre class="terminal">
make</pre>
      <p>
        Which should print the following message in your terminal:
      </p>
      <pre class="terminal">
Testing CTANGLE or NOTANGLE..OK
Testing GCC or CLANG.........OK
Compiling....................OK</pre>
      <p>
        If you found no errors, proceed with the installation running
        the following command as root:
      </p>
      <pre class="terminal">
make install</pre>
      <p>
        Which should print a lot of messages in your terminal to show
        all the files that are copied during installation. If no error
        messages were found, Weaver was correctly installed in your
        machine.
      </p>
      <h2 id="creating">Creating a New Game</h2>
      <p>
        After installing Weaver, you can create a new game project
        going to any directory where you wish to place your game and
        running the command:
      </p>
      <pre class="terminal">
weaver PROJECT_NAME</pre>
      <p>
        Where PROJECT_NAME is any name you wish to give for your
        project. Please, use ony alphanumeric characters and
        underline. Weaver will also block your name if it would create
        some sort of conflict inside the project directory. For
        example, "Makefile" isn't a valid project name. Weaver also
        block the name if it corresponds to an existing file.
      </p>
      <p>
        If Weaver allowed your name, it should have created a new
        directory called PROJECT_NAME. Inside the directory, you can
        find the following files:
      </p>
      <ul>
        <li>
          <tt>COPYING</tt>: A file with the license. Any Weaver
          project have GNU Affero GPLv3 code. So, you are allowed to
          choose only compatible licenses for your code. Or just use
          GNU Affero GPLv3 too. You can read the GNU Affero GPL
          license in this file. If you don't want to use a compatible
          version, you should contact Weaver copyright holder and
          negotiate if he could license some Weaver version with a
          non-GPL version.
        </li>
        <li>
          <tt>Makefile</tt>: Weaver uses this Makefile to know how to
          compile your project. But you never should need to change or
          edit this file.
        </li>
        <li>
          <tt>compiled_plugins</tt>: If you created a plugin for your
          game, it would be placed here after compilation.
        </li>
        <li>
          <tt>conf</tt>: A directory with the
          file <tt>conf.h</tt>. Changing the headers in that file you
          can change your project configuration. You can choose, for
          example, if you want to use C or C++. Or if you want to
          compile your project for linux or for a Web Page to play
          online.
        </li>
        <li>
          <tt>fonts</tt>: Reserved for future usage.
        </li>
        <li>
          <tt>image</tt>: Reserved for future usage.
        </li>
        <li>
          <tt>models</tt>: Reserved for future usage.
        </li>
        <li>
          <tt>music</tt>: Reserved for future usage.
        </li>
        <li>
          <tt>plugins</tt>: The source code for your game plugins. You
          can create a new plugin running inside a weaver project
          directory the command <tt>weaver --plugin PLUGIN_NAME</tt>.
        </li>
        <li>
          <tt>prog.Makefile</tt>: Another Makefile to guide the game
          executable installation. You never should need to edit this.
        </li>
        <li>
          <tt>shaders</tt>: Your game shaders. GLSL code that will be
          run in your GPU, not CPU. You can create a new shader and
          check the result running inside a weaver project directory
          the command <tt>weaver --shader SHADER_NAME</tt>.
        </li>
        <li>
          <tt>sound</tt>: You can put here any WAVE sound that you
          wish to use in your game.
        </li>
        <li>
          <tt>src</tt>: Your game source code. You can create a new C
          file and header running the command <tt>weaver FILENAME</tt>
          inside a weaver project directoy. You can then place your
          game code. It's not recommended to change the code
          inside <tt>src/weaver</tt> directory. The code there isn't
          easy to understand because it was extracted using CTANGLE or
          NOTANGLE program during installation. And any changes made
          in that directory would be overwritten if you update your
          project to run with a new Weaver version.
        </li>
        <li>
          <tt>tex</tt>: Reserved for future usage.
        </li>
        <li>
          <tt>web.Makefile</tt>: A Makefile to instruct how to compile
          the game as a web page. You never should need to edit this
          file.
        </li>
      </ul>
      <h3 id="compiling">Compiling a Weaver Project</h3>
      <p>n
        You have two choices of target compilation for your Weaver
        projects. You can compile them to became Linux programs or you
        can compile them to became javascript and HTML which could be
        played in a web browser. Below you will find what you need in
        each case.
      </p>
      <h3 id="linux">Compiling as a Linux Game</h3>
      <p>
        Before compiling your game, you must check if you have all the
        dependencies installed in your machine. You will need:
      </p>
      <ul>
        <li>
          A C compiler. Currently we
          support <a href="https://gcc.gnu.org/">GCC</a>
          and <a href="https://clang.llvm.org/">Clang</a>.
        </li>
        <li>
          A X server and it's header. If you have a graphical
          interface, the libraries are already installed, but you will
          need the headers for C code. You can install the header
          from <a href="https://www.x.org/wiki/">X.org</a>
          project. You must also have the XRandR extension, which
          Weaver uses if it needs to move or resize your game window
          and the GLX extension to use OpenGL.
        </li>
        <li>
          <a href="http://glew.sourceforge.net/">OpenGL Extension
            Wrangler Library</a>, a library that helps in querying and
            loading OpenGL Extensions.
        </li>
        <li>
          <a href="https://openal.org/">OpenAL</a>, a 3D audio library
          for game applications.
        </li>
        <li>
          <a href="https://www.mpg123.de/">MPG123</a> library, a
          library to decode MP3 files.
        </li>
        <li>
          XXD command. A linux comand-line tool which creates
          hex dumps of files. Currently it's distributed as part
          of <a href="http://www.vim.org/">Vim</a> text editor.
        </li>
      </ul>
      <p>
        If you are using Ubuntu, Linux Mint or distros like these, you
        can install all the dependencies running the command:
      </p>
      <pre class="terminal">
sudo apt-get install build-essentials libx11-dev mesa-common-dev libxrandr-dev libglew-dev libopenal1 \
libopenal-dev vim-common libmpg123-dev</pre>
      <p>
        If you have all the dependencies installed, you can compile a
        Weaver project going to the project directory and using the
        command:
      </p>
      <pre class="terminal">
make</pre>
      <p>
        The command should print in your terminal:
      </p>
      <pre class="terminal">
Testing GCC or CLANG.........OK
Testing Xlib.................OK
Testing XRandR...............OK
Testing OpenGL...............OK
Testing MPG123...............OK
Testing OpenAL...............OK
Testing XXD..................OK</pre>
      <p>
        And after this, should print the compiling commands used. If
        you wish to play the project game, just use:
      </p>
      <pre class="terminal">
./PROJECT_NAME</pre>
      <p>
        Where PROJECT_NAME is the name of your project. By default,
        when you create a new Weaver project, it creates an empty
        game, which creates a fullscreen window and exits if you press
        any key. You can also install the game with <tt>make
        install</tt>, but before installing, change
        in <tt>conf/conf.h</tt> the value of <tt>W_DEBUG_LEVEL</tt>
        to <tt>0</tt>, recompile and then install. This marks the game
        as a finished project, not a development version.
      </p>
      <h3 id="web">Compiling to Play in a Web Browser</h3>
      <p>
        Before compiling a game for a web browser, check if you have
        all the dependencies:
      </p>
      <ul>
        <li>
          <a href="http://kripken.github.io/emscripten-site/">Emscripten</a>,
          a project to compile C and C++ code to highly optimized
          Javascript in asm.js format. Please, use version 1.34.0 or
          greater.
        </li>
        <li>
          XXD command. A linux comand-line tool which creates
          hex dumps of files. Currently it's distributed as part
          of <a href="http://www.vim.org/">Vim</a> text editor.
        </li>        
      </ul>
      <p>
        To install dese dependencies in Ubuntu, Linux Mint and
        Debian-related distros, you can use the command:
      </p>
      <pre class="terminal">
sudo apt-get install emscripten vim-common</pre>
      <p>
        But beware! After installing Emscripten, check if you
        installed version 1.34.0 or greater. If not, uninstall it and
        proceed to Emscripten web page for information about how to
        install the latest version.
      </p>
      <p>
        If you have all the dependencies, you can configure the
        project to create a web page instead of an executable
        program. First open the file <tt>conf/conf.h</tt> and find a
        line with <tt>#define W_TARGET W_ELF</tt>. Change this line
        to <tt>#define W_TARGET W_WEB</tt>. Save the file and run the
        command:
      </p>
      <pre class="terminal">
make</pre>
      <p>
        If you have all the dependencies, you should got in your
        terminal:
      </p>
      <pre class="terminal">
Testing EMCC.................OK
Testing XXD..................OK</pre>
      <p>
        And much more text showing all the commands executed to create
        your game web page. The result will be put in
        directory <tt>docs</tt>. But the game probably won't work if
        you run in locally using your web browser. The game must be
        served by a web server because it uses AJAX to load
        dinamically your game assets. You can change the
        directory <tt>docs</tt> name and put in in some place where a
        web server can serve it via Internet.
      </p>
      <h3 id="source">Adding Source Code Files to Weaver Projects</h3>
      <p>
        As you develop your game, you will need to create new C source
        code files and their headers for your project. Instead of
        creating them manually, you can go inside your project
        directory and use the command:
      </p>
      <pre class="terminal">
weaver FILENAME</pre>
      <p>
        Using this command a new file <tt>src/FILENAME.c</tt>
        and <tt>src/FILENAME.h</tt> will be created. You won't need to
        worry about updating a Makefile nor putting a <tt>#include
        "FILENAME.h"</tt> in other files. Weaver will take care of
        this automatically.
      </p>
      <p>
        If instead of create a generic C file you wish to create a new
        main loop for your game, you can use the command:
      </p>
      <pre class="terminal">
weaver --loop FILENAME</pre>
      <p>
        It works like the later command, but it also creates in
        FILENAME.c some initial code for your new loop. Just take care
        to don't give to your main loop the same name than some
        existing global variable in your code.
      </p>
      <p>
        If you want to remove a C source code created this way, just
        remove the files created and also edit <tt>src/includes.h</tt>
        to remove the inclusion of the deleted header.
      </p>
      <h3 id="updating">Updating Weaver Projects</h3>
      <p>
        If you or someone else created a Weaver project with some old
        version of Weaver and you wish to upgrade, you just need to
        have installed in your machine a newer version of Weaver.
      </p>
      <p>
        If you wish to know which Weaver version you have, just use
        the command:
      </p>
      <pre class="terminal">
weaver --version</pre>
      <p>
        This should output in your terminal something like this:
      </p>
      <pre class="terminal">
Weaver	Alpha</pre>
      <p>
        Or perhaps:
      </p>
      <pre class="terminal">
Weaver 0.1</pre>
      <p>
        In the first case, the version in identified by a codiname
        (Alpha), with no numbers. It means that you have installed a
        development version of Weaver. In the second case, you have an
        stable Weaver version.
      </p>
      <p>
        To upgrade a Weaver project, just use the command:
      </p>
      <pre class="terminal">
weaver PATH_TO_PROJECT</pre>
      <p>
        A Weaver stable version would upgrade only if the project was
        created by an older version of Weaver. It wouldn't do nothing
        if you pass a project created by an new version. Stable
        versions never downgrade projects.
      </p>
      <p>
        But a development version of Weaver assumes that you are using
        this version to test Weaver changes and it always upgrades a
        project. Even if this means making a downgrade. If you don't
        want to downgrade projects (which in some cases could lead to
        some bugs in the project), avoid Weaver development versions,
        unless you know what you are doing.
      </p>
      <h3 id="plugin">Creating a New Plugin</h3>
      <p>
        Plugins are code that can be dinamically loaded in your
        projects. They can allow you to program and change a game
        while it is executing with no need to close and reload the
        game. It can also create optional parts of your game, which
        can be distributed separately. They can also be some generic
        code which could be used by any Weaver project. Perhaps
        something which makes some unhandled keyboard key works or a
        small plugin to print the frames per second.
      </p>
      <p>
        To create a new plugin for your project, you can use the
        command:
      </p>
      <pre class="terminal">
weaver --plugin PLUGIN_NAME</pre>
      <p>
        Please, use just alphanumeric characters and underline in your
        plugin name. It will then be created in the
        directory <tt>plugins/</tt>, where you can edit it.
      </p>
      <p>
        The Makefile and other files will handle automatically the new
        plugins.
      </p>
      <p>
        To read more about plugins, check
        the <a href="plugins.htm">Plugins Documentation Page</a>.
      </p>
      <h3 id="shader">Creating a New Shader</h3>
      <p>
        Shaders are code written not in C or C++, but in GLSL
        language. It's compilling during game execution and it's
        executed not in the CPU, but in GPU. They can create and
        change textures and geometries in real time.
      </p>
      <p>
        To create a new shader for your project, you can use the
        command:
      </p>
      <pre class="terminal">
weaver --shader SHADER_NAME</pre>
      <p>
        Please, use only alphanumeric characters and underline for your
        shader name. The shaders will be created at <tt>shaders/</tt>
        directory. Each shader created is in fact to shaders: a vertex
        shader and fragment shader. Both will be placed in the same
        numbered directory, and the number assigned to them is how you
        can identify them in your C code.
      </p>
      <p>
        The Makefile and other files will handle automatically the new
        plugins.
      </p>
      <p>
        To read more about shaders, check
        the <a href="shaders.htm">Shader Documentation Page</a>.
      </p>
    </div>
  </body>
</html>
